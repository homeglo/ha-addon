<?php

namespace app\models;

use app\components\HelperComponent;
use Yii;

/**
 * This is the model class for table "hg_hub_action_map".
 *
 * @property int $id
 * @property int|null $created_at
 * @property int|null $updated_at
 * @property string|null $name
 * @property string|null $display_name
 * @property string|null $map_image_url
 * @property string|null $hg_home_id
 * @property string|null $preserve_hue_buttons
 * @property string|null $hg_product_sensor_map_type
 * @property int|null $base_hg_hub_action_map_id
 * @property int|null $hg_status_id
 *
 * @property HgDeviceSensor[] $hgDeviceSensors
 * @property HgHubActionTemplate[] $hgHubActionTemplates
 * @property HgStatus $hgStatus
 */
class HgHubActionMap extends \yii\db\ActiveRecord
{
    const TYPE_HUE_DIMMER_SWITCH_4 = 'hue_dimmer_switch_4';
    const TYPE_HUE_MOTION_SENSOR = 'hue_motion_sensor';

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'hg_hub_action_map';
    }

    public function behaviors()
    {
        return [
            'timestamp' => \yii\behaviors\TimestampBehavior::className(),
            [
                'class'=>\app\behaviors\JsonDataBehavior::class,
                'attribute'=>'metadata'
            ]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['hg_status_id','hg_home_id'], 'integer'],
            [['name', 'display_name', 'hg_product_sensor_map_type', 'map_image_url'], 'string', 'max' => 255],
            [['preserve_hue_buttons'],'safe']
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
            'name' => 'Name',
            'display_name' => 'Map',
            'hg_product_sensor_map_type' => 'Hg Product Sensor Map Type',
            'hg_status_id' => 'Hg Status ID',
        ];
    }

    /**
     * Gets query for [[HgDeviceSensors]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getHgDeviceSensors()
    {
        return $this->hasMany(HgDeviceSensor::class, ['hg_hub_action_map_id' => 'id']);
    }

    /**
     * Gets query for [[HgHubActionTemplates]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getHgHubActionTemplates()
    {
        return $this->hasMany(HgHubActionTemplate::class, ['hg_hub_action_map_id' => 'id']);
    }

    /**
     * Gets query for [[HgStatus]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getHgStatus()
    {
        return $this->hasOne(HgStatus::class, ['id' => 'hg_status_id']);
    }

    /**
     * Gets query for [[HgStatus]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getBaseHgHubActionMap()
    {
        return $this->hasOne(HgHubActionMap::class, ['id' => 'base_hg_hub_action_map_id']);
    }

    public function getExcludeButtonsFromDeletionArray()
    {
        return $this->preserve_hue_buttons;
    }

    /**
     * calculate the numbers of rules generated by this map
     * @return int
     */
    public function getCalculateHueRuleCost()
    {
        $c = 0;
        foreach ($this->hgHubActionTemplates as $hgHubActionTemplate) {
            $c += count($hgHubActionTemplate->hgHubActionTriggers);
        }

        return $c-1; //-1 for smart on. so this is number does not included smart on
    }

    /**
     * Create a new map bound to a sensor
     * @param HgDeviceSensor $hgDeviceSensor
     * @param array $preserve_hue_buttons
     * @return HgHubActionMap
     * @throws \Exception
     */
    public function createLocalActionMapFromTemplate(HgDeviceSensor $hgDeviceSensor, $preserve_hue_buttons =[])
    {
        $hgHubActionMap = new HgHubActionMap();
        $hgHubActionMap->attributes = $this->attributes;
        $hgHubActionMap->display_name = '('.$hgDeviceSensor->display_name.') '. $hgHubActionMap->display_name;
        $hgHubActionMap->base_hg_hub_action_map_id = $this->id;
        $hgHubActionMap->preserve_hue_buttons = $preserve_hue_buttons;
        $hgHubActionMap->hg_home_id = $hgDeviceSensor->hgGlozone->hg_home_id;
        if (!$hgHubActionMap->save()) {
            \Yii::error(HelperComponent::getFirstErrorFromFailedValidation($hgHubActionMap));
            throw new \Exception(HelperComponent::getFirstErrorFromFailedValidation($hgHubActionMap));
        }

        $hgDeviceSensor->hg_hub_action_map_id = $hgHubActionMap->id;
        $hgDeviceSensor->save();

        return $hgHubActionMap;
    }

    /**
     * Clone a template map
     * @return HgHubActionMap
     * @throws \Exception
     */
    public function cloneActionMapTemplate()
    {
        $hgHubActionMap = new HgHubActionMap();
        $hgHubActionMap->attributes = $this->attributes;
        $hgHubActionMap->display_name = $hgHubActionMap->display_name.' (CLONE)';
        $hgHubActionMap->base_hg_hub_action_map_id = NULL;
        if (!$hgHubActionMap->save()) {
            \Yii::error(HelperComponent::getFirstErrorFromFailedValidation($hgHubActionMap));
            throw new \Exception(HelperComponent::getFirstErrorFromFailedValidation($hgHubActionMap));
        }

        foreach ($this->hgHubActionTemplates as $hgHubActionTemplate) {
            $hgHubActionTemplate->hg_hub_action_map_id = $hgHubActionMap->id;
            $hgHubActionTemplate->copyEntireTree();
        }

        return $hgHubActionMap;
    }

    /**
     * Get the rule count that should be the same as the hue hub
     * @return array
     */
    public function getLocalRules()
    {
        $c = [];
        foreach ($this->hgHubActionTemplates as $hgHubActionTemplate) {
            foreach ($hgHubActionTemplate->hgHubActionTriggers as $hgHubActionTrigger) {
                if ($hgHubActionTrigger->hue_id) {
                    $c[$hgHubActionTrigger->hue_id] = $hgHubActionTrigger;
                }
            }
        }
        return $c;
    }

    public function getTemplatesByNameQuery($name)
    {
        return HgHubActionTemplate::find()->where(['hg_hub_action_map_id'=>$this->id,'name'=>$name]);
    }

    public function getIsSuccessfullyHueProgrammed()
    {
        if (empty($this->hgHubActionTemplates)) {
            return false;
        }

        foreach ($this->hgHubActionTemplates as $hgHubActionTemplate) {
            if ($hgHubActionTemplate->hasHueRuleErrors) {
                return false;
            }
        }

        return true;
    }
}
